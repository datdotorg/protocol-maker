module.exports = my_protocol

function my_protocol (sdk) {
  const path = new Error().stack.split('\n')[2].split('(')[1].split(':')[0]
  const id = path.split('/').pop().split('.')[0].toUpperCase()
  console.log(`init ${id}`)
  sdk.id = `${id}`
  sdk.log = function log (...args) {
    if (args[0] === '[instance]') console.log(`[${id}:msg]`, args.shift(), args[0].type, args[0].data)
    else console.log(`[${id}:msg]`, args[0].type, args[0].data)
  }
  return function protocol (msg) {
    const api = sdk(msg)
    const { head, refs, type, data, meta } = msg
    const [from, to, msg_id] = head

    if (type === 'routes') {

    }
    api.log(msg)
    // const $from = api.node.contacts.by.address(from)
    // if (type === 'onchange') api.update_range_slider(data.value)
    // if (type === 'help') {
    //     $from.notify({ type: 'help', data: { state: api.node.state }, refs: { cause: head }})
    // }
    // else api.listen(msg)
  }
}